import React from 'react';
import { useNavigate } from 'react-router-dom';
import '../styles/Content.css';

const Content = ({ risks }) => {
  const navigate = useNavigate();

  if (!risks || !Array.isArray(risks)) {
    return <div>Нет данных</div>;
  }

  return (
    <div className="content-grid">
      {risks.map((risk, index) => (
        <div
          key={index}
          className="card-grid"
          onClick={() => navigate(`/risks/${risk.id}`)} // Переход на страницу риска
        >
          <div className="card-header-grid">
            <img src={risk.photo} alt="risk" className="risk-photo" />
            <div className="risk-info">
              <span className="card-critical-wrapper">
                <span className={`card-critical ${risk.criticaly?.toLowerCase() || 'gray'}`}></span>
                <span className="card-number">{risk.type} {risk.id}</span>
              </span>
              <span className="card-date">{risk.dateTimeFix}</span>
            </div>
          </div>

          <div className="card-middle-grid">
            <span className="card-category">{risk.category}</span>
            <span className="card-sector-section">{risk.sector}. {risk.section}</span>
          </div>
          <div className="card-description-grid">
            <p>{risk.description}</p>
          </div>
        </div>
      ))}
    </div>
  );
};

export default Content;

import React from 'react';
import Content from './Content';
import MapComponent from './MapComponent';
import RiskForm from './RiskForm';
import SectionHeader from './SectionHeader'; // Импортируем SectionHeader
import '../styles/MainContent.css';

const MainContent = ({ selectedSection, risks, showRiskForm, setShowRiskForm }) => {
  return (
    <div className="main-content">
      <div className="section-header-wrapper">
        <SectionHeader selectedSection={selectedSection} onShowRiskForm={() => setShowRiskForm(true)} />
      </div>
      <div className="main-content-area">
        {selectedSection === 'risks-ideas' && (
          showRiskForm ? (
            <RiskForm onClose={() => setShowRiskForm(false)} />
          ) : (
            <Content risks={risks} />
          )
        )}
        {selectedSection === 'map' && <MapComponent />}
        {selectedSection === 'tasks' && <div>Раздел "Задачи"</div>}
        {selectedSection === 'my-tasks' && <div>Раздел "Мои задачи"</div>}
        {selectedSection === 'profile' && <div>Раздел "Мой профиль"</div>}
        {selectedSection === 'stats' && <div>Раздел "Статистика"</div>}
        {selectedSection === 'places' && <div>Раздел "Места"</div>}
      </div>
    </div>
  );
};

export default MainContent;

import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import axios from 'axios';
import TopMenu from './components/TopMenu';
import Sidebar from './components/Sidebar';
import MainContent from './components/MainContent';
import RiskDetail from './components/RiskDetail'; // Импортируем новый компонент
import RiskForm from './components/RiskForm'; // Импортируем RiskForm
import './styles/App.css';

const API_HOST = process.env.REACT_APP_API_HOST;

function App() {
  const [risks, setRisks] = useState([]);
  const [selectedSection, setSelectedSection] = useState('risks-ideas');
  const [showRiskForm, setShowRiskForm] = useState(false);
  const [collapsed, setCollapsed] = useState(true);
  const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  useEffect(() => {
    if (selectedSection === 'risks-ideas') {
      axios.get(`${API_HOST}/api/risks`)
        .then(response => setRisks(response.data))
        .catch(error => console.error(error));
    }
  }, [selectedSection]);

  const handleSidebarSelect = (selectedItem) => {
    setSelectedSection(selectedItem);
    setShowRiskForm(false);

    if (selectedItem === 'risks-ideas') {
      axios.get(`${API_HOST}/api/risks`)
        .then(response => setRisks(response.data))
        .catch(error => console.error(error));
    } else {
      setRisks([]);
    }
    setCollapsed(true);
  };

  const toggleSidebar = () => {
    setCollapsed(!collapsed);
  };


  return (
    <Router>
      <div className="app">
        <TopMenu onToggleSidebar={toggleSidebar} />
        <div className="main-container">
          <Sidebar onSelect={handleSidebarSelect} collapsed={collapsed} isMobile={isMobile} />
          <div className={`main-content ${collapsed ? '' : 'shifted'}`}>
            <Routes>
              <Route
                path="/"
                element={
                  <MainContent
                    selectedSection={selectedSection}
                    risks={risks}
                    showRiskForm={showRiskForm}
                    setShowRiskForm={setShowRiskForm}
                  />
                }
              />
              <Route path="/risks/:riskId" element={<RiskDetail />} /> {/* Маршрут для страницы риска */}
              <Route path="/risks/new" element={<RiskForm onClose={() => setShowRiskForm(false)} />} /> {/* Маршрут для формы добавления риска */}
            </Routes>
          </div>
        </div>
      </div>
    </Router>
  );
}

export default App;

